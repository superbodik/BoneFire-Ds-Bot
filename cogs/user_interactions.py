import disnake
from disnake.ext import commands
import config
from typing import Dict, Optional

user_data: Dict[int, Dict[str, Optional[str]]] = {}

class UserInteractions(commands.Cog):
    def __init__(self, bot: commands.Bot) -> None:
        self.bot = bot

    @commands.Cog.listener()
    async def on_message(self, message: disnake.Message) -> None:
        if isinstance(message.channel, disnake.DMChannel) and not message.author.bot:
            guild: Optional[disnake.Guild] = self.bot.get_guild(config.REVIEW_SERVER_ID)
            if not guild:
                await message.author.send("–°–µ—Ä–≤–µ—Ä –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                return

            member: Optional[disnake.Member] = guild.get_member(message.author.id)
            if not member:
                await message.author.send("–í–∏ –Ω–µ —î —É—á–∞—Å–Ω–∏–∫–æ–º —Ü—å–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.")
                return

            if config.REQUIRED_ROLE_ID not in [role.id for role in member.roles]:
                await message.author.send("–£ –≤–∞—Å –Ω–µ–º–∞—î –Ω–µ–æ–±—Ö—ñ–¥–Ω–æ—ó —Ä–æ–ª—ñ.")
                return

            user_data[message.author.id] = {
                "text": message.content,
                "attachment": message.attachments[0].url if message.attachments else None,
                "author": str(message.author)
            }

            buttons = [
                disnake.ui.Button(label="–û–≥–æ–ª–æ—à–µ–Ω–Ω—è", custom_id="bonfire:channels/announcement", emoji="üì£"),
                disnake.ui.Button(label="–¢–æ—Ä–≥—ñ–≤–ª—è", custom_id="bonfire:channels/trade", emoji="üí∏"),
            ]
            if message.attachments:
                buttons.append(disnake.ui.Button(label="–°–∫—Ä—ñ–Ω—à–æ—Ç–∏", custom_id="bonfire:channels/screenshot", emoji="üì∏"))

            try:
                response: disnake.Message = await message.author.send(
                    "–í —è–∫–∏–π –∫–∞–Ω–∞–ª —Ö–æ—á–µ—Ç–µ –æ–ø—É–±–ª—ñ–∫–æ–≤–∞—Ç–∏?", 
                    components=[
                        disnake.ui.ActionRow(*buttons)
                    ]
                )
                user_data[message.author.id]["message_id"] = str(response.id)
            except disnake.Forbidden:
                await message.author.send("–ù–µ –º–æ–∂—É –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –£–ø–µ–≤–Ω—ñ—Ç—å—Å—è, —â–æ —É –º–µ–Ω–µ —î –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–æ–∑–≤–æ–ª–∏.")

    @commands.Cog.listener()
    async def on_button_click(self, inter: disnake.MessageInteraction) -> None:
        custom_id: str = inter.component.custom_id
        user_id: int = inter.author.id
        guild: Optional[disnake.Guild] = self.bot.get_guild(config.REVIEW_SERVER_ID)
        if not guild:
            await inter.response.send_message("–ì—ñ–ª—å–¥—ñ—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–∞.", ephemeral=True)
            return

        member: Optional[disnake.Member] = guild.get_member(user_id)
        if not member:
            await inter.response.send_message("–í–∏ –Ω–µ —î —É—á–∞—Å–Ω–∏–∫–æ–º —Ü—å–æ–≥–æ —Å–µ—Ä–≤–µ—Ä–∞.", ephemeral=True)
            return

        if custom_id in config.CHANNELS:
            if config.REQUIRED_ROLE_ID not in [role.id for role in member.roles]:
                await inter.response.send_message("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–Ω–æ–ø–∫–∏.", ephemeral=True)
                return

            section_name: str = {
                "bonfire:channels/announcement": "–û–≥–æ–ª–æ—à–µ–Ω–Ω—è",
                "bonfire:channels/trade": "–¢–æ—Ä–≥—ñ–≤–ª—è",
                "bonfire:channels/screenshot": "–°–∫—Ä—ñ–Ω—à–æ—Ç–∏"
            }.get(custom_id, "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ä–æ–∑–¥—ñ–ª")

            buttons = [
                disnake.ui.Button(label="–û–≥–æ–ª–æ—à–µ–Ω–Ω—è", custom_id="bonfire:channels/announcement", emoji="üì£", disabled=True),
                disnake.ui.Button(label="–¢–æ—Ä–≥—ñ–≤–ª—è", custom_id="bonfire:channels/trade", emoji="üí∏", disabled=True),
            ]
            if user_data[user_id]["attachment"]:
                buttons.append(disnake.ui.Button(label="–°–∫—Ä—ñ–Ω—à–æ—Ç–∏", custom_id="bonfire:channels/screenshot", emoji="üì∏", disabled=True))

            ad_text: str = user_data[user_id].get("text", "–¢–µ–∫—Å—Ç –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
            attachment: Optional[str] = user_data[user_id].get("attachment", None)

            embed: disnake.Embed = disnake.Embed(description=f"{config.RULES[custom_id]}\n\n–ù–∞–∑–≤–∞ —Ä–æ–∑–¥—ñ–ª—É: {section_name}\n\n–¢–µ–∫—Å—Ç –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è:\n{ad_text}")
            if attachment:
                embed.set_image(url=attachment)

            try:
                original_message: disnake.Message = await inter.author.fetch_message(int(user_data[user_id]["message_id"]))
                await original_message.edit(
                    components=[
                        disnake.ui.ActionRow(*buttons)
                    ]
                )

                confirm_button_disabled: bool = config.REQUIRED_ROLE_ID not in [role.id for role in member.roles]
                response: disnake.Message = await inter.author.send(
                    embed=embed,
                    components=[
                        disnake.ui.ActionRow(
                            disnake.ui.Button(label="–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", custom_id=f"confirm_{custom_id}", disabled=confirm_button_disabled)
                        )
                    ]
                )
                user_data[user_id]["confirm_message_id"] = str(response.id)
                await inter.response.defer()  # Defers the interaction response
            except disnake.Forbidden:
                await inter.author.send("–ù–µ –º–æ–∂—É –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è. –£–ø–µ–≤–Ω—ñ—Ç—å—Å—è, —â–æ —É –º–µ–Ω–µ —î –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–æ–∑–≤–æ–ª–∏.")

            user_data[user_id]["selected_channel"] = custom_id

        elif custom_id.startswith("confirm_"):
            if user_id not in config.MODERATORS and config.REQUIRED_ROLE_ID not in [role.id for role in member.roles]:
                await inter.response.send_message("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–Ω–æ–ø–∫–∏.", ephemeral=True)
                return

            label: str = custom_id.split("_", 1)[1]
            review_guild: Optional[disnake.Guild] = self.bot.get_guild(config.REVIEW_SERVER_ID)
            review_channel: Optional[disnake.TextChannel] = review_guild.get_channel(config.REVIEW_CHANNEL_ID) if review_guild else None
            if review_channel:
                ad_text: str = user_data.get(user_id, {}).get("text", "–¢–µ–∫—Å—Ç –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                attachment: Optional[str] = user_data.get(user_id, {}).get("attachment", None)
                author: Optional[str] = user_data.get(user_id, {}).get("author")
                section_name: str = {
                    "bonfire:channels/announcement": "–û–≥–æ–ª–æ—à–µ–Ω–Ω—è",
                    "bonfire:channels/trade": "–¢–æ—Ä–≥—ñ–≤–ª—è",
                    "bonfire:channels/screenshot": "–°–∫—Ä—ñ–Ω—à–æ—Ç–∏"
                }.get(label, "–ù–µ–≤—ñ–¥–æ–º–∏–π —Ä–æ–∑–¥—ñ–ª")
                embed: disnake.Embed = disnake.Embed(description=f"–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤—ñ–¥ {author}:\n{ad_text}\n\n–ö–∞–Ω–∞–ª: {section_name}")
                if attachment:
                    embed.set_image(url=attachment)
                try:
                    review_message: disnake.Message = await review_channel.send(embed=embed, components=[
                        disnake.ui.ActionRow(
                            disnake.ui.Button(label="‚úÖ –û–ø—É–±–ª—ñ–∫–æ–≤–∞—Ç—å", custom_id=f"approve_{user_id}_{label}"),
                            disnake.ui.Button(label="‚ùå –ü–æ–≤–µ—Ä–Ω—É—Ç–∏", custom_id=f"deny_{user_id}")
                        )
                    ])
                    user_data[user_id]["review_message_id"] = str(review_message.id)
                    await inter.response.send_message("–ß–µ–∫–∞–π—Ç–µ, –≤–∞—à –ø–æ—Å—Ç –≤ –æ–±—Ä–æ–±—Ü—ñ –º–æ–¥–µ—Ä–∞—Ç–æ—Ä—ñ–≤.", ephemeral=True)
                except disnake.Forbidden:
                    await inter.response.send_message("–ù–µ –º–æ–∂—É –≤—ñ–¥–ø—Ä–∞–≤–∏—Ç–∏ –ø–æ–≤—ñ–¥–æ–º–ª–µ–Ω–Ω—è –≤ –∫–∞–Ω–∞–ª –ø–µ—Ä–µ–≤—ñ—Ä–∫–∏. –£–ø–µ–≤–Ω—ñ—Ç—å—Å—è, —â–æ —É –º–µ–Ω–µ —î –Ω–µ–æ–±—Ö—ñ–¥–Ω—ñ –¥–æ–∑–≤–æ–ª–∏.", ephemeral=True)

            confirm_message: disnake.Message = await inter.author.fetch_message(int(user_data[user_id]["confirm_message_id"]))
            await confirm_message.edit(
                components=[
                    disnake.ui.ActionRow(
                        disnake.ui.Button(label="–ü—ñ–¥—Ç–≤–µ—Ä–¥–∏—Ç–∏", custom_id=f"confirm_{label}", disabled=True)
                    )
                ]
            )

        elif custom_id.startswith("approve_") or custom_id.startswith("deny_"):
            if user_id not in config.MODERATORS:
                await inter.response.send_message("–£ –≤–∞—Å –Ω–µ–º–∞—î –ø—Ä–∞–≤ –Ω–∞ –≤–∏–∫–æ—Ä–∏—Å—Ç–∞–Ω–Ω—è —Ü—ñ—î—ó –∫–Ω–æ–ø–∫–∏.", ephemeral=True)
                return

            parts: list[str] = custom_id.split("_")
            target_user_id: int = int(parts[1])
            label: Optional[str] = parts[2] if custom_id.startswith("approve_") else None
            channel_id: Optional[int] = config.CHANNELS.get(label) if label else None

            review_message: disnake.Message = await inter.channel.fetch_message(int(user_data[target_user_id]["review_message_id"]))
            await review_message.edit(
                components=[
                    disnake.ui.ActionRow(
                        disnake.ui.Button(label="‚úÖ –û–ø—É–±–ª—ñ–∫–æ–≤–∞—Ç—å", custom_id=f"approve_{target_user_id}_{label}", disabled=True),
                        disnake.ui.Button(label="‚ùå –ü–æ–≤–µ—Ä–Ω—É—Ç–∏", custom_id=f"deny_{target_user_id}", disabled=True)
                    )
                ]
            )

            if custom_id.startswith("approve_") and channel_id:
                channel: Optional[disnake.TextChannel] = self.bot.get_channel(channel_id)
                if channel:
                    ad_text: str = user_data.get(target_user_id, {}).get("text", "–¢–µ–∫—Å—Ç –æ–≥–æ–ª–æ—à–µ–Ω–Ω—è –Ω–µ –∑–Ω–∞–π–¥–µ–Ω–æ.")
                    attachment: Optional[str] = user_data.get(target_user_id, {}).get("attachment", None)
                    author: Optional[str] = user_data.get(target_user_id, {}).get("author")
                    embed: disnake.Embed = disnake.Embed(description=f"–û–≥–æ–ª–æ—à–µ–Ω–Ω—è –≤—ñ–¥ {author}:\n{ad_text}")
                    if attachment:
                        embed.set_image(url=attachment)
                    await channel.send(embed=embed)
                    await inter.response.send_message("–ü–æ—Å—Ç –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ.")
                    if author:
                        await self.bot.get_user(target_user_id).send("–í–∞—à –ø–æ—Å—Ç –æ–ø—É–±–ª—ñ–∫–æ–≤–∞–Ω–æ!")
                    user_data.pop(target_user_id, None)

            elif custom_id.startswith("deny_"):
                author: Optional[str] = user_data.get(target_user_id, {}).get("author")
                await inter.response.send_message("–ü–æ—Å—Ç –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
                if author:
                    await self.bot.get_user(target_user_id).send("–í–∞—à –ø–æ—Å—Ç –≤—ñ–¥—Ö–∏–ª–µ–Ω–æ.")
                    user_data.pop(target_user_id, None)

def setup(bot: commands.Bot) -> None:
    bot.add_cog(UserInteractions(bot))
